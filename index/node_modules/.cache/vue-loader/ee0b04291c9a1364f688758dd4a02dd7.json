{"remainingRequest":"C:\\Users\\lenovo\\Desktop\\整合-html\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\lenovo\\Desktop\\整合-html\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\lenovo\\Desktop\\整合-html\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lenovo\\Desktop\\整合-html\\src\\views\\baodian\\Beautify.vue?vue&type=template&id=2b156066&scoped=true&","dependencies":[{"path":"C:\\Users\\lenovo\\Desktop\\整合-html\\src\\views\\baodian\\Beautify.vue","mtime":1604055062406},{"path":"C:\\Users\\lenovo\\Desktop\\整合-html\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\整合-html\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\整合-html\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\整合-html\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiYTEiLCBhdHRyczogeyBpZDogImFwcCIgfSB9LAogICAgWwogICAgICBfYygKICAgICAgICAibXQtaGVhZGVyIiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAicm9vZiIsIGF0dHJzOiB7IHRpdGxlOiAi6b2/56eR5LiT5Zy6IiwgZml4ZWQ6ICIiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyBzbG90OiAibGVmdCIsIHRvOiAiLyIgfSwgc2xvdDogImxlZnQiIH0sCiAgICAgICAgICAgIFtfYygibXQtYnV0dG9uIiwgeyBhdHRyczogeyBpY29uOiAiYmFjayIgfSB9KV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygibXQtYnV0dG9uIiwgewogICAgICAgICAgICBhdHRyczogeyBzbG90OiAicmlnaHQiLCBpY29uOiAibW9yZSIgfSwKICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaG93UG9wdXAgfSwKICAgICAgICAgICAgc2xvdDogInJpZ2h0IgogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgInZhbi1wb3B1cCIsCiAgICAgICAgewogICAgICAgICAgc3R5bGU6IHsgaGVpZ2h0OiAiMTAlIiB9LAogICAgICAgICAgYXR0cnM6IHsgcG9zaXRpb246ICJ0b3AiIH0sCiAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICB2YWx1ZTogX3ZtLnNob3csCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICBfdm0uc2hvdyA9ICQkdgogICAgICAgICAgICB9LAogICAgICAgICAgICBleHByZXNzaW9uOiAic2hvdyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZnhzeCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZlbnhpYW5nIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5fZmVueGlhbmcucG5nIiwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi5YiGIOS6qyIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2h1YXhpbiIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3NodWF4aW4ucG5nIiwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi5Yi3IOaWsCIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiaW1hZ2VzIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl9ob21lcGFnZTEuanBnIiwKICAgICAgICAgIGFsdDogIiIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYTIiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJtdC1uYXZiYXIiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uYWN0aXZlLAogICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICBfdm0uYWN0aXZlID0gJCR2CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImFjdGl2ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJtdC10YWItaXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiMSIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmdldGRhdGEoMSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5hY3RpdmUgPT0gIjEiCiAgICAgICAgICAgICAgICAgICAgPyBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFubml1IiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3hpeWFfaC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICA6IF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYW5uaXUiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGl5YS5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgIm10LXRhYi1pdGVtIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICIyIiB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZ2V0ZGF0YSgyKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLmFjdGl2ZSA9PSAiMiIKICAgICAgICAgICAgICAgICAgICA/IF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYW5uaXUiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX21laWJhaV9oLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIDogX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbm5pdSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl9tZWliYWkucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJtdC10YWItaXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiMyIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmdldGRhdGEoMykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5hY3RpdmUgPT0gIjMiCiAgICAgICAgICAgICAgICAgICAgPyBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFubml1IiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3RpZXBpYW4ucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgOiBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFubml1IiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3RpZW1pYW4ucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJtdC10YWItaXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiNCIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmdldGRhdGEoNCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5hY3RpdmUgPT0gIjQiCiAgICAgICAgICAgICAgICAgICAgPyBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFubml1IiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl9qaWFvemhlbmdfaC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICA6IF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYW5uaXUiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX2ppYW96aGVuZy5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIm10LXRhYi1jb250YWluZXIiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uYWN0aXZlLAogICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICBfdm0uYWN0aXZlID0gJCR2CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImFjdGl2ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygibXQtdGFiLWNvbnRhaW5lci1pdGVtIiwgeyBhdHRyczogeyBpZDogIjEiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbm5pdV90IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3h5LnBuZyIsCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJtdC10YWItY29udGFpbmVyLWl0ZW0iLCB7IGF0dHJzOiB7IGlkOiAiMiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFubml1X3QiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5fbWIucG5nIiwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIm10LXRhYi1jb250YWluZXItaXRlbSIsIHsgYXR0cnM6IHsgaWQ6ICIzIiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYW5uaXVfdCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl90bS5wbmciLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibXQtdGFiLWNvbnRhaW5lci1pdGVtIiwgeyBhdHRyczogeyBpZDogIjQiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbm5pdV90IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX2p6LnBuZyIsCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogImNpdHkiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9kaXpoaSIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2l0eTEiIH0sIFsKICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWFqOmDqOWfjuW4giIpXSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGlhbGEucG5nIiwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgIF92bS5fbSgxKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAibXQtdGFiLWNvbnRhaW5lciIsCiAgICAgICAgewogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5hY3RpdmUsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICBfdm0uYWN0aXZlID0gJCR2CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJhY3RpdmUiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgIm10LXRhYi1jb250YWluZXItaXRlbSIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4aXlhNSIsIGF0dHJzOiB7IGlkOiAiMSIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl9sKHRoaXMuaSwgZnVuY3Rpb24oaXRlbSwga2V5KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2MoImRpdiIsIHsga2V5OiBrZXksIHN0YXRpY0NsYXNzOiAieGl5YTEiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl8iICsgaXRlbS5nb29kc19pbWcsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyhpdGVtLmdvb2RzX25hbWUpKV0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKGl0ZW0udGVycml0b3J5KSldKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLvv6UiICsgX3ZtLl9zKGl0ZW0ub3JpZ2luYWxfcHJpY2UpKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi77+lIiArIF92bS5fcyhpdGVtLnByZXBheSkpXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0dXBpYW4iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3FpYW5nZ291LnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNpdHkiLCBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIyMHB4IiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvc2VsZWN0IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNpdHkxIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWFqOmDqOWfjuW4giIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGlhbGEucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2l0eTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWFqOmDqOmhueebriIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGlhbGEucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNpdHkzIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLmmbrog73mjpLluo8iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3hpYWxhLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmFzZSIgfSwKICAgICAgICAgICAgICAgIF92bS5fbCh0aGlzLnR3bywgZnVuY3Rpb24ob25uZXIsIGtleSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoImRpdiIsIHsga2V5OiBrZXksIHN0YXRpY0NsYXNzOiAiYmFzZTEiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl9iYXNlMS5qcGciLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyhvbm5lci5nb29kc19uYW1lKSldKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKG9ubmVyLnRlcnJpdG9yeSkpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLlt7LllK7vvJoiICsgX3ZtLl9zKG9ubmVyLnNvbGQpKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLCpSIgKyBfdm0uX3Mob25uZXIucHJlcGF5KSldKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkZWwiLCBbX3ZtLl92KCLCpSIgKyBfdm0uX3Mob25uZXIub3JpZ2luYWxfcHJpY2UpKV0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAibXQtdGFiLWNvbnRhaW5lciIsCiAgICAgICAgewogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5hY3RpdmUsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICBfdm0uYWN0aXZlID0gJCR2CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJhY3RpdmUiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgIm10LXRhYi1jb250YWluZXItaXRlbSIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4aXlhNSIsIGF0dHJzOiB7IGlkOiAiMiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl9sKHRoaXMuaSwgZnVuY3Rpb24oaXRlbSwga2V5KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2MoImRpdiIsIHsga2V5OiBrZXksIHN0YXRpY0NsYXNzOiAieGl5YTIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl9jc2I1LmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyhpdGVtLmdvb2RzX25hbWUpKV0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKGl0ZW0udGVycml0b3J5KSldKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLvv6UiICsgX3ZtLl9zKGl0ZW0ub3JpZ2luYWxfcHJpY2UpKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi77+lIiArIF92bS5fcyhpdGVtLnByZXBheSkpXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0dXBpYW4iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3FpYW5nZ291LnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNpdHkiLCBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIyMHB4IiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvc2VsZWN0IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNpdHkxIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWFqOmDqOWfjuW4giIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGlhbGEucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2l0eTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWFqOmDqOmhueebriIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGlhbGEucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNpdHkzIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLmmbrog73mjpLluo8iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3hpYWxhLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fbCh0aGlzLnR3bywgZnVuY3Rpb24ob25uZXIsIGtleSkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJkaXYiLCB7IGtleToga2V5LCBzdGF0aWNDbGFzczogImJhc2UiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYXNlMSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX2Jhc2UxLmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKG9ubmVyLmdvb2RzX25hbWUpKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdihfdm0uX3Mob25uZXIudGVycml0b3J5KSldKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuW3suWUru+8miIgKyBfdm0uX3Mob25uZXIuc29sZCkpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIsKlIiArIF92bS5fcyhvbm5lci5wcmVwYXkpKV0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRlbCIsIFtfdm0uX3YoIsKlIiArIF92bS5fcyhvbm5lci5vcmlnaW5hbF9wcmljZSkpXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAyCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJtdC10YWItY29udGFpbmVyIiwKICAgICAgICB7CiAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICB2YWx1ZTogX3ZtLmFjdGl2ZSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgIF92bS5hY3RpdmUgPSAkJHYKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImFjdGl2ZSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAibXQtdGFiLWNvbnRhaW5lci1pdGVtIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInhpeWE1IiwgYXR0cnM6IHsgaWQ6ICIzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX2wodGhpcy5pLCBmdW5jdGlvbihpdGVtLCBrZXkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygiZGl2IiwgeyBrZXk6IGtleSwgc3RhdGljQ2xhc3M6ICJ4aXlhMiIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX2NzYjguanBnIiwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKGl0ZW0uZ29vZHNfbmFtZSkpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdihfdm0uX3MoaXRlbS50ZXJyaXRvcnkpKV0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIu+/pSIgKyBfdm0uX3MoaXRlbS5vcmlnaW5hbF9wcmljZSkpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLvv6UiICsgX3ZtLl9zKGl0ZW0ucHJlcGF5KSldKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInR1cGlhbiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5fcWlhbmdnb3UucG5nIiwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY2l0eSIsIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjIwcHgiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9zZWxlY3QiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2l0eTEiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi5YWo6YOo5Z+O5biCIildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl94aWFsYS5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaXR5MiIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi5YWo6YOo6aG555uuIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl94aWFsYS5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2l0eTMiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuaZuuiDveaOkuW6jyIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGlhbGEucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJiYXNlIiB9LAogICAgICAgICAgICAgICAgX3ZtLl9sKHRoaXMudHdvLCBmdW5jdGlvbihvbm5lciwga2V5KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygiZGl2IiwgeyBrZXk6IGtleSwgc3RhdGljQ2xhc3M6ICJiYXNlMSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX2Jhc2UxLmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKG9ubmVyLmdvb2RzX25hbWUpKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdihfdm0uX3Mob25uZXIudGVycml0b3J5KSldKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuW3suWUru+8miIgKyBfdm0uX3Mob25uZXIuc29sZCkpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIsKlIiArIF92bS5fcyhvbm5lci5wcmVwYXkpKV0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRlbCIsIFtfdm0uX3YoIsKlIiArIF92bS5fcyhvbm5lci5vcmlnaW5hbF9wcmljZSkpXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAyCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJtdC10YWItY29udGFpbmVyIiwKICAgICAgICB7CiAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICB2YWx1ZTogX3ZtLmFjdGl2ZSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgIF92bS5hY3RpdmUgPSAkJHYKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwcmVzc2lvbjogImFjdGl2ZSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAibXQtdGFiLWNvbnRhaW5lci1pdGVtIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInhpeWE1IiwgYXR0cnM6IHsgaWQ6ICI0IiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX2wodGhpcy5pLCBmdW5jdGlvbihpdGVtLCBrZXkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygiZGl2IiwgeyBrZXk6IGtleSwgc3RhdGljQ2xhc3M6ICJ4aXlhMiIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX2NzYjEyLmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyhpdGVtLmdvb2RzX25hbWUpKV0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKGl0ZW0udGVycml0b3J5KSldKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLvv6UiICsgX3ZtLl9zKGl0ZW0ub3JpZ2luYWxfcHJpY2UpKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi77+lIiArIF92bS5fcyhpdGVtLnByZXBheSkpXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0dXBpYW4iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3FpYW5nZ291LnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNpdHkiLCBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIyMHB4IiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvc2VsZWN0IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNpdHkxIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWFqOmDqOWfjuW4giIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGlhbGEucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2l0eTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWFqOmDqOmhueebriIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9pbWcvX3pjYy9jYW5feGlhbGEucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNpdHkzIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLmmbrog73mjpLluo8iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3hpYWxhLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmFzZSIgfSwKICAgICAgICAgICAgICAgIF92bS5fbCh0aGlzLnR3bywgZnVuY3Rpb24ob25uZXIsIGtleSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoImRpdiIsIHsga2V5OiBrZXksIHN0YXRpY0NsYXNzOiAiYmFzZTEiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl9iYXNlMS5qcGciLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyhvbm5lci5nb29kc19uYW1lKSldKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKG9ubmVyLnRlcnJpdG9yeSkpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLlt7LllK7vvJoiICsgX3ZtLl9zKG9ubmVyLnNvbGQpKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLCpSIgKyBfdm0uX3Mob25uZXIucHJlcGF5KSldKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkZWwiLCBbX3ZtLl92KCLCpSIgKyBfdm0uX3Mob25uZXIub3JpZ2luYWxfcHJpY2UpKV0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygiZGl2IikKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNpdHkyIiB9LCBbCiAgICAgIF9jKCJwIiwgW192bS5fdigi5YWo6YOo6aG555uuIildKSwKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6ICJodHRwOi8vMTI3LjAuMC4xOjMwMDAvaW1nL196Y2MvY2FuX3hpYWxhLnBuZyIsIGFsdDogIiIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaXR5MyIgfSwgWwogICAgICBfYygicCIsIFtfdm0uX3YoIuaZuuiDveaOkuW6jyIpXSksCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiAiaHR0cDovLzEyNy4wLjAuMTozMDAwL2ltZy9femNjL2Nhbl94aWFsYS5wbmciLCBhbHQ6ICIiIH0KICAgICAgfSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}